import requests
import json
from aiogram import Bot, Dispatcher, executor, types


class CurrencyBot:
    def __init__(self, url: str):
        self.url = url

    def convert2RU(self, currency: str, value: float):
        data = requests.get(f"{self.url}").json()
        return round(data['Valute'][currency]['Previous'] * value, 2)

    def convertRU2Currency(self, currency: str, value: float):
        data = requests.get(f"{self.url}").json()
        return round(data['Valute'][currency]['Previous'] / value, 2)

    def currencySearch(self, currency: str):
        data = requests.get(f"{self.url}").json()
        index = 0
        for i in data['Valute']:
            if currency == data['Valute'][i]['CharCode']:
                index = 1
                break
        return index


if __name__ == '__main__':
    cc = CurrencyBot(url='https://www.cbr-xml-daily.ru/daily_json.js')

    bot = Bot('6221700392:AAHKVFkElfXof_LVIUBo-eQptdyl6mYlnt8')
    dp = Dispatcher(bot)

    user_states = {}

    @dp.message_handler(commands=['start'])
    async def start(message):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        buttons = ['üí± –î–∞', 'üö´ –ù–µ—Ç']
        keyboard.add(*buttons)
        await message.reply(f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}, —Ç—ã —Ö–æ—á–µ—à—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ä—É–±–ª–∏?", reply_markup=keyboard)

    @dp.message_handler(commands=['help'])
    async def welcome_help(message):
        await bot.send_message(message.chat.id, '–¶–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞ - —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç –±–æ—Ç, \
                               –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –≤–Ω–µ—à–Ω–∏–º–∏ REST API.\
                               –ü–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç.\
                               –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –∫–∞–∫–æ–π –≤–∞–ª—é—Ç—ã –≤ –∫–∞–∫—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å. –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω.\
                               –í–≤–µ–¥–∏—Ç–µ /start –∏ —Å–ª–µ–¥—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–∏—è–º –±–æ—Ç–∞...')

    @dp.message_handler()
    async def repeat(message: types.Message):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        buttons = ['üí± –î–∞', 'üö´ –ù–µ—Ç']
        keyboard.add(*buttons)
        await message.reply(f"–ú–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", reply_markup=keyboard)

    @dp.message_handler()
    async def handle_currency_index(message: types.Message):
        user_id = message.from_user.id
        if user_id not in user_states:
            user_states[user_id] = {}

        if cc.currencySearch(message.text) == 1:
            user_states[user_id]['currency_index'] = message.text
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏')
            handle_amount(message)
            return 0
        else:
            await message.answer('–¢–∞–∫–æ–π –≤–∞–ª—é—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
            await get_currency(message)
            return 1
        
    @dp.message_handler()
    async def handle_amount(message: types.Message):
        user_id = message.from_user.id

        try:
            user_states[user_id]['amount'] = float(message.text)
            return
        
        except ValueError:
            await message.answer('–¢–∞–∫–æ–π —Å—É–º–º—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
            await handle_currency_index(message)
            return

    
    @dp.message_handler()
    async def get_currency_2_rub(message: types.Message, user_id: str):
        if message.text in {'üí± –î–∞', '–î–∞', '–¥–∞'}:
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            buttons = ['USD', 'EUR', 'GBP']
            keyboard.add(*buttons)
            await message.reply('–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –∏–Ω–¥–µ–∫—Å –Ω—É–∂–Ω–æ–π –í–∞–º –≤–∞–ª—é—Ç—ã', reply_markup=keyboard)
            
            currency_index = await handle_currency_index(message)
            amount = user_states[user_id]['amount']

            if currency_index == 1: 
                result = cc.convert2RU(user_states[user_id]['currency_index'], user_states[user_id]['amount'])
                await message.answer(f"–î–ª—è –ø–æ–∫—É–ø–∫–∏ {currency_index} –≤ —Ä–∞–∑–º–µ—Ä–µ {amount}, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ {result} —Ä—É–±–ª–µ–π + –∫–æ–º–∏—Å—Å–∏—è –±–∞–Ω–∫–∞.")
        
        await repeat()

    
    @dp.message_handler()
    async def get_rub_2_currency(message: types.Message, user_id: str):
        if message.text in {'üö´ –ù–µ—Ç', '–Ω–µ—Ç', '–ù–µ—Ç'}:
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            buttons = ['USD', 'EUR', 'GBP']
            keyboard.add(*buttons)
            await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫—É—é –≤–∞–ª—é—Ç—É –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä—É–±–ª–∏ –∏–ª–∏ –≤–≤–µ–¥–∏ –∏–Ω–¥–µ–∫—Å', reply_markup=keyboard)

            currency_index = await handle_currency_index(message)
            amount = user_states[user_id]['amount']
            
            if currency_index == 1:
                result = cc.convertRU2Currency(currency_index, amount)
                await message.answer(f"–ü—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ {currency_index} –≤ —Ä–∞–∑–º–µ—Ä–µ {amount}, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ {result} + –∫–æ–º–∏—Å—Å–∏—è –±–∞–Ω–∫–∞.")
                
        await repeat()
            
    executor.start_polling(dp, skip_updates=True)
    
